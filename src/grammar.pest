start               = _{ SOI ~ top_level* ~ EOI }
top_level           = _{ python_code | picture_definition | film } 

film                = { identifier ~ empty_paramaters? ~ "::" ~ film_picture ~ film_parameters? }
film_picture        = { identifier ~ parameters? }
film_parameters     = { "[" ~ film_parameter? ~ ("," ~ film_parameter)*  ~ "]"}
film_parameter      = { identifier ~ "=" ~ expression }

python_code         = ${ python_delimeter ~ WHITESPACE* ~ python_code_line* ~ WHITESPACE* ~ python_delimeter }
python_code_line    = { !python_delimeter ~ (!python_delimeter ~ ANY)*  }
python_delimeter    = _{ "***" }

picture_definition  = { standard_picture | picture_function | picture_selection  }

standard_picture    = { identifier ~ empty_paramaters? ~ "<<" ~ basis_picture ~ (transform_set | csg_operation)+ }
basis_picture       = { identifier ~ parameters? }
transform_set       = { "[" ~ num_pics ~ transform_expressions? ~ transform* ~ "]" }
transform_expressions = { "(" ~ expression+ ~ ") "}
num_pics            = { "{" ~ expression_simple ~ ("," ~ num_pics_identifier)? ~ ("," ~ num_pics_identifier)? ~ "}" }
num_pics_identifier = _{ identifier | blank_argument }
transform           = _{ scale_transform | translate_transform | rotate_transform | color_transform }
scale_transform     = { "*" ~ transform_arguments }
translate_transform = { "+" ~ transform_arguments }
rotate_transform    = { "@" ~ transform_arguments }
color_transform     = { "^" ~ transform_arguments }

transform_arguments = _{ "(" ~ transform_argument ~ "," ~ transform_argument ~ "," ~ transform_argument ~ ")" }
transform_argument  = _{ expression_simple | blank_argument }
blank_argument      = { WHITESPACE* }

expression_simple   = { (py_string | py_list | py_dictionary | py_binary | py_parenthetical | py_call | py_unary | py_literal | py_identifier) ~ py_terminator? }
expression          = { (py_string | py_list | py_dictionary | py_binary | py_parenthetical | py_call | py_unary | py_assign | py_literal | py_identifier) ~ py_terminator? }
py_terminator       = _{ ";" | "\n" }

py_parenthetical    = _{ "(" ~ expression ~ ")"}
py_list             = _{ "[" ~ expression? ~ ("," ~ expression)* ~ "]"}
py_dictionary       = _{ "{" ~ py_entry? ~ ("," ~ py_entry)* ~ "}"}
py_entry            = _{ py_string ~ ":" ~ expression }

py_string           = _{ py_string_single | py_string_double }
py_string_single    = _{ "'" ~ (!"'" ~ ANY)* ~ "'" }
py_string_double    = _{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

py_assign           = _{ identifier ~( "," ~ identifier)* ~ py_op_assign ~ expression }
py_op_assign        = _{ "=" | "+=" | "-=" | "*=" | "@=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**=" | "//=" }

py_binary           = _{ py_term ~ (py_op_binary ~ expression)+ }
py_term             = _{ py_string | py_list | py_dictionary | py_parenthetical | py_call | py_literal | py_identifier }
py_op_binary        = _{ "+" | "-" | "*" | "/" | "//" | "%" | "@" }

py_unary            = _{ py_op_unary ~ expression }
py_op_unary         = _{ "+" | "-" | "~" }

py_call             = _{ identifier ~ "(" ~ py_argument? ~ ( "," ~ py_argument )* ~ ")" }
py_argument         = _{ py_named_argument | expression }
py_named_argument   = _{ identifier ~ "=" ~ expression }

py_literal          = _{ literal }
py_identifier       = _{ identifier }

picture_function    = { identifier ~ parameters? ~ "<<" ~ basis_picture ~ transform_set* }

picture_selection   = { identifier ~ empty_paramaters? ~ "<<" ~ picture_list }

picture_list        = _{ "[" ~ picture_list_item? ~ ("," ~ picture_list_item)* ~ "]" }
picture_list_item   = _{ identifier ~ parameters? }

csg_operation       = { csg_operator ~ csg_operand }
csg_operand         = _{ identifier ~ parameters? }
csg_operator        = { "+" | "-" | "n" | "&" }

parameters          = { "(" ~ parameter? ~ ("," ~ parameter)* ~ ")" }
parameter           = _{ named_expression | expression_simple }
named_expression    = { identifier ~ "=" ~ expression_simple }
empty_paramaters    = _{ "(" ~ ")" }

literal             = { number }
identifier          = @{ XID_START ~ XID_CONTINUE* }
number              = { ("." | NUMBER)+ } 

WHITESPACE          = _{ " " | "\t" | NEWLINE }
COMMENT             = _{ single_line_comment | multi_line_comment }
single_line_comment = _{ "#" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) } 
multi_line_comment  = _{ "///" ~ (!"\\\\\\" ~ ANY)* ~ "\\\\\\" } 

todo                = { "##TODO##" }